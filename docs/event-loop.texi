@node event loop,await ports,coroutines,Top

The (a-sync event-loop) module provides an event loop for asynchronous
operations.  The event loop does not of itself start any new threads.
Instead it runs in the thread which calls event-loop-run!: that
procedure will block while there are events to be processed.  In most
programs the event loop will run in the main program thread, with
which the program began.  Many programs using event loops are entirely
single threaded.

However, the event loop provided by this module does support multiple
threads.  Most of the event loop procedures in this module are thread
safe and may be called in any thread.  The thread safe procedures are
event-loop-run!  (as mentioned, this will cause the event loop to run
in the thread which calls it), event-loop-block!, event-loop-quit!,
event-post!, event-loop-add-read-watch!, event-loop-add-write-watch!,
event-loop-remove-read-watch!, event-loop-remove-write-watch!,
timeout-post! and timeout-remove!.  In particular, event-post! allows
worker threads to post an event to an event loop, say with the result
of a computation, so that the event callback will execute in the event
loop thread.

The file watches provided by this module use guile's wrapper for the
select() system call.  This has two consequences.  First, in linux
select() applied to sockets can give rise to spurious wake-ups, which
means that it may be best with sockets to set the socket as
non-blocking using the guile wrapper for the fcntl() system call in
order to prevent a blocking read where it is not expected.  With
guile-2.2 this means that with such sockets, suspendable ports should
generally be used with the await-read-suspendable! procedure in the
@ref{await ports,,(a-sync await-ports)} module.  Secondly, with
select() the file descriptor value of a port passed to the watch
should not exceed FD_SETSIZE.  Normally, by default the maximum soft
user limit for open files is the same as FD_SETSIZE, and it is best if
this situation is retained by user code.

This modules provides the following procedures:

@deffn {Scheme Procedure} set-default-event-loop! [loop]
The 'loop' (event loop) argument is optional.  This procedure sets the
default event loop for the procedures in this module to the one passed
in (which must have been constructed by the make-event-loop
procedure), or if no argument is passed (or #f is passed), a new event
loop will be constructed for you as the default, which can be accessed
via the get-default-event-loop procedure.  The default loop variable
is not a fluid or a parameter - it is intended that the default event
loop is the same for every thread in the program, and that the default
event loop would normally run in the thread with which the program
started.  This procedure is not thread safe - if it might be called by
a different thread from others which might access the default event
loop, then external synchronization may be required.  However, that
should not normally be an issue.  The normal course would be to call
this procedure once only on program start up, before other threads
have started.  It is usually a mistake to call this procedure twice:
if there are asynchronous events pending (that is, if event-loop-run!
has not returned) you will probably not get the results you expect.
@end deffn

@deffn {Scheme Procedure} get-default-event-loop
This returns the default loop set by the set-default-event-loop!
procedure, or #f if none has been set.
@end deffn

@deffn {Scheme Procedure} make-event-loop [throttle-threshold throttle-delay]
This constructs a new event loop object.  From version 0.2, this
procedure optionally takes two throttling arguments for backpressure
when applying the event-post! procedure to the event loop.  The
'throttle-threshold' argument specifies the number of unexecuted tasks
queued for execution, by virtue of calls to event-post!, at which
throttling will first be applied.  Where the threshold is exceeded,
throttling proceeds by adding a wait to any thread which calls the
event-post! procedure, equal to the cube of the number of times (if
any) by which the number of queued tasks exceeds the threshold
multiplied by the value of 'threshold-delay'.  The value of
'threshold-delay' should be given in microseconds.  Throttling is only
applied where the call to event-post! is made in a thread other than
the one in which the event loop runs.

So if the threshold given is 10000 tasks and the delay given is 1000
microseconds, upon 10000 unexecuted tasks accumulating a delay of 1000
microseconds will be applied to callers of event-post! which are not
in the event loop thread, at 20000 unexecuted tasks a delay of 8000
microseconds will be applied, and at 30000 unexecuted tasks a delay of
27000 microseconds will be applied, and so on.

If throttle-threshold and throttle-delay arguments are not provided
(or #f is passed for them), then no throttling takes place.
@end deffn

@deffn {Scheme Procedure} event-loop? obj
This procedure indicates whether 'obj' is an event-loop object
constructed by make-event-loop.
@end deffn

@deffn {Scheme Procedure} event-loop-run! [loop]
The 'loop' (event loop) argument is optional.  This procedure starts
the event loop passed in as an argument, or if none is passed (or #f
is passed) it starts the default event loop.  The event loop will run
in the thread which calls this procedure.  If this procedure has
returned, including after a call to event-loop-quit!, this procedure
may be called again to restart the event loop.  If a callback throws,
or something else throws in the implementation, then this procedure
will clean up the event loop as if event-loop-quit! had been called,
and the exception will be rethrown out of this procedure.
@end deffn

@deffn {Scheme Procedure} event-loop-add-read-watch! file proc [loop]
The 'loop' (event loop) argument is optional.  This procedure will
start a read watch in the event loop passed in as an argument, or if
none is passed (or #f is passed), in the default event loop.  The
'proc' callback should take a single argument, and when called this
will be set to 'in or 'excpt.  The same port or file descriptor can
also be passed to event-loop-add-write-watch, and if so and the
descriptor is also available for writing, the write callback will also
be called with its argument set to 'out.  If there is already a read
watch for the file passed, the old one will be replaced by the new
one.  If 'proc' returns #f, the read watch will be removed from the
event loop, otherwise the watch will continue.  This is thread safe -
any thread may add a watch, and the callback will execute in the event
loop thread.  The file argument can be either a port or a file
descriptor.  If 'file' is a file descriptor, any port for the
descriptor is not referenced for garbage collection purposes - it must
remain valid while operations are carried out on the descriptor.  If
'file' is a buffered port, buffering will be taken into account in
indicating whether a read can be made without blocking (but on a
buffered port, for efficiency purposes each read operation in response
to this watch should usually exhaust the buffer by calling drain-input
or by looping on char-ready?, or the port's ordinary input procedures
should be used with suspendable ports using the
await-read-suspendable!  procedure in the @ref{await ports,,(a-sync
await-ports)} module).

This procedure should not throw an exception unless memory is
exhausted.  If 'proc' throws, say because of port errors, and the
exception is not caught locally, it will propagate out of
event-loop-run!.
@end deffn

@deffn {Scheme Procedure} event-loop-add-write-watch! file proc [loop]
The 'loop' (event loop) argument is optional.  This procedure will
start a write watch in the event loop passed in as an argument, or if
none is passed (or #f is passed), in the default event loop.  The
'proc' callback should take a single argument, and when called this
will be set to 'out or 'excpt.  The same port or file descriptor can
also be passed to event-loop-add-read-watch, and if so and the
descriptor is also available for reading or in exceptional condition,
the read callback will also be called with its argument set to 'in or
'excpt (if both a read and a write watch have been set for the same
file argument, and there is an exceptional condition, it is the read
watch procedure which will be called with 'excpt rather than the write
watch procedure, so if that procedure returns #f only the read watch
will be removed).  If there is already a write watch for the file
passed, the old one will be replaced by the new one.  If 'proc'
returns #f, the write watch will be removed from the event loop,
otherwise the watch will continue.  This is thread safe - any thread
may add a watch, and the callback will execute in the event loop
thread.  The file argument can be either a port or a file descriptor.
If 'file' is a file descriptor, any port for the descriptor is not
referenced for garbage collection purposes - it must remain valid
while operations are carried out on the descriptor.

If 'file' is a buffered port, buffering will be taken into account in
indicating whether a write can be made without blocking, either
because there is room in the buffer for a character, or because the
underlying file descriptor is ready for a character.  This can have
unintended consequences: if the buffer is full but the underlying file
descriptor is ready for a character, the next write will cause a
buffer flush, and if the size of the buffer is greater than the number
of characters that the file can receive without blocking, blocking
might still occur.  Unless the port will carry out a partial flush in
such a case, this procedure will therefore generally work best either
with unbuffered ports (say by using the open-file or fdopen procedure
with the '0' mode option or the R6RS open-file-input-port procedure
with a buffer-mode of none, or by calling setvbuf), or the port's
ordinary output procedures should be used with suspendable ports using
the await-write-suspendable! procedure in the @ref{await
ports,,(a-sync await-ports)} module.

This procedure should not throw an exception unless memory is
exhausted.  If 'proc' throws, say because of port errors, and the
exception is not caught locally, it will propagate out of
event-loop-run!.
@end deffn

@deffn {Scheme Procedure} event-loop-remove-read-watch! file [loop]
The 'loop' (event loop) argument is optional.  This procedure will
remove a read watch from the event loop passed in as an argument, or
if none is passed (or #f is passed), from the default event loop.  The
file argument may be a port or a file descriptor.  This is thread safe
- any thread may remove a watch.  A file descriptor and a port with
the same underlying file descriptor compare equal for the purposes of
removal.
@end deffn

@deffn {Scheme Procedure} event-loop-remove-write-watch! file [loop]
The 'loop' (event loop) argument is optional.  This procedure will
remove a write watch from the event loop passed in as an argument, or
if none is passed (or #f is passed), from the default event loop.  The
file argument may be a port or a file descriptor.  This is thread safe
- any thread may remove a watch.  A file descriptor and a port with
the same underlying file descriptor compare equal for the purposes of
removal.
@end deffn

@deffn {Scheme Procedure} event-post! action [loop]
The 'loop' (event loop) argument is optional.  This procedure will
post a callback for execution in the event loop passed in as an
argument, or if none is passed (or #f is passed), in the default event
loop.  The 'action' callback is a thunk.  This is thread safe - any
thread may post an event (that is its main purpose), and the action
callback will execute in the event loop thread.  Actions execute in
the order in which they were posted.  If an event is posted from a
worker thread, it will normally be necessary to call event-loop-block!
beforehand.

This procedure should not throw an exception unless memory is
exhausted.  If the 'action' callback throws, and the exception is not
caught locally, it will propagate out of event-loop-run!.

Where this procedure is called by other than the event loop thread,
throttling may take place if the number of posted callbacks waiting to
execute exceeds the threshold set for the event loop - see the
documentation on make-event-loop for further details.
@end deffn

@deffn {Scheme Procedure} timeout-post! msecs action [loop]
The 'loop' (event loop) argument is optional.  This procedure adds a
timeout to the event loop passed in as an argument, or if none is
passed (or #f is passed), to the default event loop.  The timeout will
repeat unless and until the passed-in callback returns #f or
timeout-remove! is called.  The passed-in callback must be a thunk.
This procedure returns a tag symbol to which timeout-remove! can be
applied.  It may be called by any thread, and the timeout callback
will execute in the event loop thread.

This procedure should not throw an exception unless memory is
exhausted.  If the 'action' callback throws, and the exception is not
caught locally, it will propagate out of event-loop-run!.
@end deffn


@deffn {Scheme Procedure} timeout-remove! tag [loop]
The 'loop' (event loop) argument is optional.  This procedure stops
the timeout with the given tag from executing in the event loop passed
in as an argument, or if none is passed (or #f is passed), in the
default event loop.  It may be called by any thread.
@end deffn

@deffn {Scheme Procedure} event-loop-block! val [loop]
By default, upon there being no more watches, timeouts and posted
events for an event loop, event-loop-run! will return, which is
normally what you want with a single threaded program.  However, this
is undesirable where a worker thread is intended to post an event to
the main loop after it has reached a result, say via
await-task-in-thread!, because the main loop may have ended before it
posts.  Passing #t to the val argument of this procedure will prevent
that from happening, so that the event loop can only be ended by
calling event-loop-quit!, or by calling event-loop-block! again with a
#f argument (to switch the event loop back to non-blocking mode, pass
#f).  This is thread safe - any thread may call this procedure.  The
'loop' (event loop) argument is optional: this procedure operates on
the event loop passed in as an argument, or if none is passed (or #f
is passed), on the default event loop.
@end deffn

@deffn {Scheme Procedure} event-loop-quit! [loop]
This procedure causes an event loop to unblock.  Any events remaining
in the event loop will be discarded.  New events may subsequently be
added after event-loop-run! has unblocked and event-loop-run! then
called for them.  This is thread safe - any thread may call this
procedure.  The 'loop' (event loop) argument is optional: this
procedure operates on the event loop passed in as an argument, or if
none is passed (or #f is passed), on the default event loop.
@end deffn

@deffn {Scheme Procedure} await-task-in-thread! await resume [loop] thunk [handler]
The loop and handler arguments are optional.  The procedure will run
'thunk' in its own thread, and then post an event to the event loop
specified by the 'loop' argument when 'thunk' has finished, or to the
default event loop if no 'loop' argument is provided or if #f is
provided as the 'loop' argument (pattern matching is used to detect
the type of the third argument).  This procedure calls 'await' and
will return the thunk's return value.  It is intended to be called in
a waitable procedure invoked by a-sync.  It will normally be necessary
to call event-loop-block! before invoking this procedure.  If the
optional 'handler' argument is provided, then that handler will be run
in the event loop thread if 'thunk' throws and the return value of the
handler would become the return value of this procedure; otherwise the
program will terminate if an unhandled exception propagates out of
'thunk'.  'handler' should take the same arguments as a guile catch
handler (this is implemented using catch).

This procedure must (like the a-sync procedure) be called in the same
thread as that in which the event loop runs, where the result of
calling 'thunk' will be received.  As mentioned above, the thunk
itself will run in its own thread.

Exceptions may propagate out of this procedure if they arise while
setting up (that is, before the worker thread starts), which shouldn't
happen unless memory is exhausted or pthread has run out of resources.
Exceptions arising during execution of the task, if not caught by a
handler procedure, will terminate the program.  Exceptions thrown by
the handler procedure will propagate out of event-loop-run!.

Here is an example of the use of await-task-in-thread!:
@example
(set-default-event-loop!) ;; if none has yet been set
(a-sync (lambda (await resume)
	  (simple-format #t "1 + 1 is ~A\n"
			 (await-task-in-thread! await resume
						(lambda ()
						  (+ 1 1))))
	  (event-loop-quit!)))
(event-loop-block! #t) ;; because the task runs in another thread
(event-loop-run!)
@end example
@end deffn

@deffn {Scheme Procedure} await-task! await resume [loop] thunk
The 'loop' argument is optional.  This is a convenience procedure for
use with an event loop, which will run 'thunk' in the event loop
specified by the 'loop' argument, or in the default event loop if no
'loop' argument is provided or #f is provided as the 'loop' argument.
This procedure calls 'await' and will return the thunk's return value.
It is intended to be called in a waitable procedure invoked by a-sync.
It is the single-threaded corollary of await-task-in-thread!.  This
means that (unlike with await-task-in-thread!) while 'thunk' is
running other events in the event loop will not make progress, so
blocking calls should not be made in 'thunk'.  This procedure can be
useful for the purpose of implementing co-operative multi-tasking, say
by composing tasks with compose-a-sync (see the @ref{compose,,compose}
module).

This procedure must (like the a-sync procedure) be called in the same
thread as that in which the event loop runs.

Exceptions may propagate out of this procedure if they arise while
setting up (that is, before the task starts), which shouldn't happen
unless memory is exhausted.  Exceptions arising during execution of
the task, if not caught locally, will propagate out of
event-loop-run!.

Here is an example of the use of await-task!:
@example
(set-default-event-loop!) ;; if none has yet been set
(a-sync (lambda (await resume)
	  (simple-format #t "1 + 1 is ~A\n"
			 (await-task! await resume
				      (lambda ()
					(+ 1 1))))))
(event-loop-run!)
@end example
@end deffn

@deffn {Scheme Procedure} await-timeout! await resume [loop] msecs thunk
This is a convenience procedure for use with an event loop, which will
run 'thunk' in the event loop thread when the timeout expires.  This
procedure calls 'await' and will return the thunk's return value.  It
is intended to be called in a waitable procedure invoked by a-sync.
The timeout is single shot only - as soon as 'thunk' has run once and
completed, the timeout will be removed from the event loop.  The
'loop' argument is optional: this procedure operates on the event loop
passed in as an argument, or if none is passed (or #f is passed), on
the default event loop.

This procedure must (like the a-sync procedure) be called in the same
thread as that in which the event loop runs.

Exceptions may propagate out of this procedure if they arise while
setting up (that is, before the first call to 'await' is made), which
shouldn't happen unless memory is exhausted.  Exceptions thrown by
'thunk', if not caught locally, will propagate out of event-loop-run!.

Here is an example of the use of event-timeout!:
@example
(set-default-event-loop!) ;; if none has yet been set
(a-sync (lambda (await resume)
	  (simple-format #t
			 "Timeout ~A\n"
			 (await-timeout! await resume
					 100
					 (lambda ()
					   "expired")))))
(event-loop-run!)
@end example
@end deffn

The (a-sync event-loop) module also loads the @ref{monotonic
time,,(a-sync monotonic-time)} module.
